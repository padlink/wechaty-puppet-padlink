import type { LocalClient } from "../../index.js";
import { Response, SendAppMessageResponse, ChatRoomMember, Contact, Message } from "../../map/index.js";
export declare class Api {
    private _cacheMgr?;
    private readonly _client;
    private token;
    private uuid;
    private wxid;
    private callback;
    private poll_message_timer;
    constructor(client: LocalClient);
    init(): Promise<void>;
    login(_: any, callback: any): Promise<void>;
    getLoginCodeByFirst: () => Promise<void>;
    getSecondLogin(): Promise<void>;
    poll_message(): void;
    getLoginCodeNew(token?: string): Promise<any>;
    checkLoginStatus(): Promise<any>;
    poll_heart(): void;
    heart(retryCount?: number): Promise<any>;
    poll_change_contact: (interval: number) => Promise<void>;
    getInitMessage(): Promise<{
        messageList: Message[];
        contactList: any;
    }>;
    getMessage(isinit?: boolean): Promise<{
        messageList: Message[];
        contactList: any;
    }>;
    send_text(ToUserName: string, TextContent: string, AtWxIDList: string[]): Promise<Response>;
    sendImageMessage(ToUserName: string, ImageContent: string, AtWxIDList?: string[]): Promise<Response>;
    sendVideoMessage(ToUserName: string, VideoData: any, videoData1: any): Promise<Response>;
    sendFileMessage(VideoData: any): Promise<Response>;
    sendMessageEmoji(ToUserName: string, EmojiMd5: string, EmojiSize?: number): Promise<Response>;
    sendMessageLink(id: string, username: string, options: any): Promise<SendAppMessageResponse>;
    sendMessageMiniProgram(tousername: string, json: any): Promise<SendAppMessageResponse>;
    forwardMessage(username: string, content: any): Promise<SendAppMessageResponse>;
    forwardMessagewenjian(username: string, content: any): Promise<SendAppMessageResponse>;
    sendVoiceMessage(username: string, filePath: any, VoiceSecond: any): Promise<Response>;
    getAllChatRoomMembers(): Promise<Contact[]>;
    getChatRoomMembers(id: string): Promise<ChatRoomMember[]>;
    getContact(id: string, ticket?: string): Promise<Contact | undefined>;
    updateSelfNickName(name: string): Promise<any>;
    updateSelfSignature(name: string): Promise<any>;
    getContactQRCode(name: string, type: Number): Promise<any>;
    updateContactRemark(id: string, alias: string): Promise<void>;
    GetFriendRelation(id: string): Promise<any>;
    addContact(stranger: string, ticket: String, hello: String): Promise<void>;
    deleteContact(id: string): Promise<void>;
    getChatContact(id: string): Promise<Contact>;
    getMyContact(id: string): Promise<any>;
    getChatRoomContact(id: string): Promise<Contact>;
    acceptChatRoomInvitation(inviterUserName: string, invitationURL: string): Promise<any>;
    quitChatRoom(roomId: string): Promise<any>;
    getMessageImage(content: string, tousername: string, pbImageType: number): Promise<any>;
    getMessageVoice(id: string, content: string, tousername: string): Promise<any>;
    getMessageVideo(id: string, content: string, tousername: string): Promise<any>;
    getMessageAttach(content: string, tousername: string): Promise<any>;
    getMessageMiniProgramThumb(content: string, tousername: string): Promise<any>;
    getMessageAttachThumb(content: string, tousername: string): Promise<any>;
    sendContactCardMessage(toUserName: string, contact: any): Promise<Response>;
    logout(): Promise<Response>;
    revokeMessage(tousername: string, ClientMsgId: string, NewMsgId: string): Promise<any>;
    createChatRoom(contactIdList: string[], topic?: string): Promise<any>;
    inviteChatroomMembers(roomId: string, contactId: string): Promise<void>;
    deleteChatRoomMember(roomId: string, contactId: string): Promise<void>;
    getChatRoomQrCode(roomId: string): Promise<any>;
    setChatRoomName(roomId: string, topic: string): Promise<void>;
    getChatRoomAnnouncement(roomId: string): Promise<void>;
    setChatRoomAnnouncement(roomId: string, text: string): Promise<void>;
    acceptUser(userName: string, ticket: string, stranger: string, scene: any): Promise<void>;
    getLabelList(): Promise<any>;
    addLabel(name: string): Promise<any>;
    removeLabel(id: string): Promise<any>;
    setContactLabel(contactId: string, contactLabelIds: any): Promise<any>;
}
//# sourceMappingURL=index.d.ts.map