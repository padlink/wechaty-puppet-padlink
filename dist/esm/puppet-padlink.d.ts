import { LocalClient } from "./server/index.js";
import * as PadPlus from "./server/map/index.js";
import * as PUPPET from "wechaty-puppet";
import type { FileBoxInterface } from "file-box";
export type PuppetXpOptions = PUPPET.PuppetOptions;
declare class PuppetPadlink extends PUPPET.Puppet {
    options: any;
    static readonly VERSION: string;
    private _printVersion;
    private _onPushSerialExecutor;
    private _cacheMgr?;
    _client?: LocalClient;
    protected get client(): LocalClient;
    constructor(options?: any);
    version(): string;
    onStop(): Promise<void>;
    private _stopClient;
    onStart(): Promise<void>;
    login(contactId: string): Promise<void>;
    ding(data?: string): void;
    contactSelfName(name: string): Promise<void>;
    contactSelfQRCode(): Promise<string>;
    contactSelfSignature(signature: string): Promise<void>;
    contactAlias(contactId: string): Promise<string>;
    contactAlias(contactId: string, alias: string | null): Promise<void>;
    contactAvatar(contactId: string): Promise<FileBoxInterface>;
    contactAvatar(contactId: string, file: FileBoxInterface): Promise<void>;
    contactList(): Promise<string[]>;
    contactCorporationRemark(contactId: string, corporationRemark: string | null): Promise<void>;
    contactDescription(contactId: string, description: string | null): Promise<void>;
    contactPhone(contactId: string, phoneList: string[]): Promise<void>;
    conversationReadMark(conversationId: string, hasRead?: boolean): Promise<void>;
    messageContact(_messageId: string): Promise<string>;
    messageFile(messageId: string): Promise<FileBoxInterface>;
    messageImage(messageId: string, imageType: PUPPET.types.Image): Promise<FileBoxInterface>;
    messageMiniProgram(messageId: string): Promise<PUPPET.payloads.MiniProgram>;
    messageUrl(messageId: string): Promise<PUPPET.payloads.UrlLink>;
    messageSendText(toUserName: string, text: string, mentionIdList?: string[]): Promise<string>;
    messageSendFile(toUserName: string, fileBox: FileBoxInterface): Promise<string>;
    messageSendContact(toUserName: string, contactId: string): Promise<string>;
    messageSendUrl(toUserName: string, linkPayload: PUPPET.payloads.UrlLink): Promise<string>;
    messageSendMiniProgram(toUserName: string, mpPayload: PUPPET.payloads.MiniProgram): Promise<string>;
    messageRecall(messageId: string): Promise<boolean>;
    forwardMessagewenjian(id: any, content: any): Promise<void>;
    messageForward(toUserName: string, messageId: string): Promise<string>;
    roomAdd(roomId: string, contactId: string): Promise<void>;
    roomAvatar(roomId: string): Promise<FileBoxInterface>;
    roomQRCode(roomId: string): Promise<string>;
    logout(): Promise<void>;
    roomCreate(contactIdList: string[], topic?: string): Promise<string>;
    roomDel(roomId: string, contactId: string): Promise<void>;
    roomList(): Promise<string[]>;
    roomQuit(roomId: string): Promise<void>;
    roomTopic(roomId: string): Promise<string>;
    roomTopic(roomId: string, topic: string): Promise<void>;
    roomAnnounce(roomId: string): Promise<string>;
    roomAnnounce(roomId: string, text: string): Promise<void>;
    roomMemberList(roomId: string): Promise<string[]>;
    roomInvitationAccept(roomInvitationId: string): Promise<void>;
    friendshipAccept(friendshipId: string): Promise<void>;
    isFriend(contactId: string): Promise<boolean>;
    friendshipAdd(contactId: string, option?: PUPPET.types.FriendshipAddOptions): Promise<void>;
    friendshipSearchPhone(phone: string): Promise<null | string>;
    friendshipSearchWeixin(weixin: string): Promise<null | string>;
    private _friendshipSearch;
    private _findRoomIdForUserName;
    contactDelete(contactId: string): Promise<void>;
    tagContactAdd(tagName: string, contactId: string): Promise<void>;
    tagContactRemove(tagName: string, contactId: string): Promise<void>;
    tagContactDelete(tagName: string): Promise<void>;
    tagContactList(contactId?: string): Promise<string[]>;
    contactRawPayload(id: string): Promise<any>;
    contactRawPayloadParser(payload: any): Promise<PUPPET.payloads.Contact>;
    messageRawPayload(id: string): Promise<any>;
    messageRawPayloadParser(payload: any): Promise<PUPPET.payloads.Message>;
    roomRawPayload(id: string): Promise<PadPlus.Contact.AsObject>;
    roomRawPayloadParser(payload: PadPlus.Contact.AsObject): Promise<PUPPET.payloads.Room>;
    roomMemberRawPayload(roomId: string, contactId: string): Promise<any>;
    roomMemberRawPayloadParser(rawPayload: any): Promise<any>;
    roomInvitationRawPayload(roomInvitationId: string): Promise<PUPPET.payloads.RoomInvitation>;
    roomInvitationRawPayloadParser(rawPayload: PUPPET.payloads.RoomInvitation): Promise<PUPPET.payloads.RoomInvitation>;
    friendshipRawPayload(id: string): Promise<PUPPET.payloads.Friendship>;
    friendshipRawPayloadParser(rawPayload: PUPPET.payloads.Friendship): Promise<PUPPET.payloads.Friendship>;
    private _onPushContact;
    private _onPushMessage;
    private _updateContactCache;
    private _updateRoomMember;
    private _refreshContact;
    private _getMessageImageFileBox;
    private _onSendMessage;
    private _findTagWithName;
    private _getTagList;
    private _getRoomMemberList;
    private _startClient;
    private _setupClient;
}
export { PuppetPadlink };
export default PuppetPadlink;
//# sourceMappingURL=puppet-padlink.d.ts.map