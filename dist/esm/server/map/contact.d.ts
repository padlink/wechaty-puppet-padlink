export declare class Contact {
    private username;
    private nickname;
    private avatar;
    private gender;
    private signature;
    private alias;
    private label;
    private remark;
    private city;
    private province;
    private country;
    private contactaddscene;
    private antispamticket;
    private stranger;
    private encryptusername;
    private phoneList;
    private chatroomownerusername;
    private chatroommaxcount;
    private chatroommemberList;
    constructor({ username, nickname, avatar, gender, signature, alias, label, remark, city, province, country, contactaddscene, stranger, encryptusername, antispamticket, phoneList, chatroomownerusername, chatroommaxcount, chatroommemberList, }?: {
        username?: string;
        nickname?: string;
        avatar?: string;
        gender?: number;
        signature?: string;
        alias?: string;
        label?: string;
        remark?: string;
        city?: string;
        province?: string;
        country?: string;
        contactaddscene?: number;
        stranger?: boolean;
        encryptusername?: string;
        antispamticket?: string;
        phoneList?: Array<string>;
        chatroomownerusername?: string;
        chatroommaxcount?: number;
        chatroommemberList?: Array<any>;
    });
    getUsername(): string;
    setUsername(value: string): Contact;
    getNickname(): string;
    setNickname(value: string): Contact;
    getAvatar(): string;
    setAvatar(value: string): Contact;
    getGender(): number;
    setGender(value: number): Contact;
    getSignature(): string;
    setSignature(value: string): Contact;
    getAlias(): string;
    setAlias(value: string): Contact;
    getLabel(): string;
    setLabel(value: string): Contact;
    getRemark(): string;
    setRemark(value: string): Contact;
    getCity(): string;
    setCity(value: string): Contact;
    getProvince(): string;
    setProvince(value: string): Contact;
    getCountry(): string;
    setCountry(value: string): Contact;
    getContactaddscene(): number;
    setContactaddscene(value: number): Contact;
    getStranger(): boolean;
    setStranger(value: boolean): Contact;
    getEncryptusername(): string;
    setEncryptusername(value: string): Contact;
    getAntispamticket(): string;
    setAntispamticket(value: string): Contact;
    clearPhoneList(): void;
    getPhoneList(): Array<string>;
    setPhoneList(value: Array<string>): Contact;
    addPhone(value: string, index?: number): string;
    getChatroomownerusername(): string;
    setChatroomownerusername(value: string): Contact;
    getChatroommaxcount(): number;
    setChatroommaxcount(value: number): Contact;
    clearChatroommemberList(): void;
    getChatroommemberList(): Array<any>;
    setChatroommemberList(value: Array<any>): Contact;
    addChatroommember(value?: any, index?: number): any;
    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Contact.AsObject;
    static toObject(includeInstance: boolean, msg: Contact): Contact.AsObject;
    static serializeBinaryToWriter(message: Contact, writer: any): void;
    static deserializeBinary(bytes: Uint8Array): Contact;
    static deserializeBinaryFromReader(message: Contact, reader: any): Contact;
}
export declare namespace Contact {
    type AsObject = {
        username: string;
        nickname: string;
        avatar: string;
        gender: number;
        signature: string;
        alias: string;
        label: string;
        remark: string;
        city: string;
        province: string;
        country: string;
        contactaddscene: number;
        stranger: boolean;
        encryptusername: string;
        phoneList: Array<string>;
        chatroomownerusername: string;
        chatroommaxcount: number;
        chatroommemberList: Array<any>;
    };
}
//# sourceMappingURL=contact.d.ts.map